generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Buyer {
  id        String    @id
  name      String
  email     String    @unique
  addresses Address[]
  createdAt DateTime  @default(now())
  orders    Order[]
  reviews   Review[]
}

model Store {
  id        String      @id @default(uuid())
  name      String      @unique
  userId    String      @unique
  products  Product[]
  orders    Order[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Billboard Billboard[]
}

model Billboard {
  id          String @id @default(uuid())
  title       String @unique
  storeId     String
  store       Store  @relation(fields: [storeId], references: [id])
  descriprion String
  image       Image  @relation(fields: [imageId], references: [id])
  imageId     String
}

model Address {
  id         String @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  buyerId    String
  buyer      Buyer  @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String
  price       Float
  isAvailable Boolean          @default(false)
  storeId     String
  store       Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id])
  images      Image[]
  variants    ProductVariant[]
  reviews     Review[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductVariant {
  id            String         @id @default(uuid())
  sku           String         @unique
  price         Float
  stock         Int            @default(0)
  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantValues VariantValue[]
  orderItems    OrderItem[]
}

model Variant {
  id         String         @id @default(uuid())
  name       String         @unique
  values     VariantValue[]
  categories Category[]
}

model VariantValue {
  id              String           @id @default(uuid())
  value           String
  variantId       String
  variant         Variant          @relation(fields: [variantId], references: [id], onDelete: Cascade)
  productVariants ProductVariant[]

  @@unique([variantId, value])
}

model Category {
  id            String     @id @default(uuid())
  name          String     @unique
  parentId      String?
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[] @relation("SubCategories")
  products      Product[]
  variants      Variant[]
}

model Image {
  id        String      @id @default(cuid())
  url       String
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  Billboard Billboard[]
}

model Order {
  id                 String      @id @default(uuid())
  buyerId            String
  buyer              Buyer       @relation(fields: [buyerId], references: [id])
  storeId            String
  store              Store       @relation(fields: [storeId], references: [id])
  pricePaid          Float
  platformFee        Float
  status             OrderStatus @default(PENDING)
  orderItems         OrderItem[]
  shippingStreet     String
  shippingCity       String
  shippingPostalCode String
  paymentIntentId    String?     @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model OrderItem {
  id               String         @id @default(uuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id])
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  quantity         Int
  price            Float
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  buyerId   String
  buyer     Buyer    @relation(fields: [buyerId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
